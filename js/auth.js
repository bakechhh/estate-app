// auth.js - Ë™çË®ºÈñ¢ÈÄ£„ÅÆÂá¶ÁêÜÔºà‰øÆÊ≠£ÁâàÔºâ
const Auth = {
    // ÁèæÂú®„ÅÆ„É¶„Éº„Ç∂„ÉºÊÉÖÂ†±„Çí‰øùÊåÅ
    currentUser: null,
    currentUserProfile: null,

    // „É≠„Ç∞„Ç§„É≥Âá¶ÁêÜÔºà„Éá„Éº„Çø„Éô„Éº„ÇπÈñ¢Êï∞„Çí‰ΩøÁî®Ôºâ
    async login(userId, password) {
        try {
            console.log('Login attempt for user:', userId);
            
            // Step 1: „Éá„Éº„Çø„Éô„Éº„ÇπÈñ¢Êï∞„ÇíÂëº„Å≥Âá∫„Åó„Å¶„É¶„Éº„Ç∂„ÉºÊÉÖÂ†±„ÇíÂèñÂæó
            const { data: authResult, error: authError } = await supabase
                .rpc('authenticate_user', {
                    p_user_code: userId,
                    p_password: password  // Ê≥®ÊÑèÔºöÂÆüÈöõ„Å´„ÅØ„Éë„Çπ„ÉØ„Éº„Éâ„ÅØ‰ΩøÁî®„Åó„Å™„ÅÑ
                });

            if (authError) {
                console.error('Authentication function error:', authError);
                return { success: false, error: '„Ç∑„Çπ„ÉÜ„É†„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü' };
            }

            if (!authResult.success) {
                return { success: false, error: authResult.error };
            }

            const userData = authResult.user;
            console.log('User found:', userData.email);

            // Step 2: Supabase Auth„Åß„É≠„Ç∞„Ç§„É≥
            const { data: authData, error: signInError } = await supabase.auth.signInWithPassword({
                email: userData.email,
                password: password
            });

            if (signInError) {
                console.error('Sign in error:', signInError);
                
                if (signInError.message.includes('Invalid login credentials')) {
                    return { success: false, error: '„Éë„Çπ„ÉØ„Éº„Éâ„ÅåÊ≠£„Åó„Åè„ÅÇ„Çä„Åæ„Åõ„Çì' };
                }
                return { success: false, error: '„É≠„Ç∞„Ç§„É≥„Å´Â§±Êïó„Åó„Åæ„Åó„Åü' };
            }

            // Step 3: „É≠„Ç∞„Ç§„É≥ÊàêÂäüÂæå„ÄÅÊîπ„ÇÅ„Å¶„É¶„Éº„Ç∂„Éº„Éó„É≠„Éï„Ç°„Ç§„É´„ÇíÂèñÂæó
            const profile = await this.getUserProfile(authData.user.id);
            if (!profile) {
                console.error('Failed to get user profile after login');
                await supabase.auth.signOut();
                return { success: false, error: '„É¶„Éº„Ç∂„ÉºÊÉÖÂ†±„ÅÆÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü' };
            }

            // ÊàêÂäü
            this.currentUser = authData.user;
            this.currentUserProfile = profile;

            console.log('Login successful');
            return { success: true, user: authData.user, profile };

        } catch (error) {
            console.error('Login error:', error);
            return { success: false, error: '„É≠„Ç∞„Ç§„É≥Âá¶ÁêÜ‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü' };
        }
    },

    // „É≠„Ç∞„Ç¢„Ç¶„ÉàÂá¶ÁêÜ
    async logout() {
        try {
            const { error } = await supabase.auth.signOut();
            if (error) throw error;

            this.currentUser = null;
            this.currentUserProfile = null;
            
            // „É≠„Ç∞„Ç§„É≥„Éö„Éº„Ç∏„Å∏„É™„ÉÄ„Ç§„É¨„ÇØ„Éà
            window.location.href = './login.html';
        } catch (error) {
            console.error('Logout error:', error);
            alert('„É≠„Ç∞„Ç¢„Ç¶„Éà„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
        }
    },

    // „É¶„Éº„Ç∂„Éº„Éó„É≠„Éï„Ç°„Ç§„É´ÂèñÂæóÔºàË™çË®ºÂæå„ÅÆ„ÅøÔºâ
    async getUserProfile(userId) {
        try {
            console.log('Getting user profile for:', userId);
            
            const { data, error } = await supabase
                .from('users')
                .select(`
                    *,
                    store:stores(*)
                `)
                .eq('id', userId)
                .single();

            if (error) {
                console.error('Profile fetch error:', error);
                return null;
            }

            console.log('Profile fetched successfully');
            return data;
        } catch (error) {
            console.error('Get user profile error:', error);
            return null;
        }
    },

    // Ë™çË®ºÁä∂ÊÖã„Çí„ÉÅ„Çß„ÉÉ„ÇØ
    async checkAuth() {
        try {
            // ÁèæÂú®„ÅÆ„Çª„ÉÉ„Ç∑„Éß„É≥„ÇíÂèñÂæó
            const { data: { session }, error } = await supabase.auth.getSession();
            
            if (error || !session) {
                console.log('No active session');
                return { authenticated: false };
            }

            console.log('Active session found for:', session.user.email);

            // „É¶„Éº„Ç∂„Éº„Éó„É≠„Éï„Ç°„Ç§„É´„ÇíÂèñÂæó
            const profile = await this.getUserProfile(session.user.id);
            if (!profile) {
                console.error('Profile not found for authenticated user');
                await this.logout();
                return { authenticated: false };
            }

            // „Ç¢„ÇØ„ÉÜ„Ç£„Éñ„ÉÅ„Çß„ÉÉ„ÇØ
            if (!profile.is_active) {
                console.log('User is not active');
                await this.logout();
                return { authenticated: false };
            }

            this.currentUser = session.user;
            this.currentUserProfile = profile;

            return { 
                authenticated: true, 
                user: session.user, 
                profile 
            };
        } catch (error) {
            console.error('Check auth error:', error);
            return { authenticated: false };
        }
    },

    // Ê®©Èôê„ÉÅ„Çß„ÉÉ„ÇØ
    hasRole(role) {
        return this.currentUserProfile?.role === role;
    },

    // ÁÆ°ÁêÜËÄÖÊ®©Èôê„ÉÅ„Çß„ÉÉ„ÇØ
    isAdmin() {
        return this.hasRole('admin');
    },

    // Âêå„ÅòÂ∫óËàó„ÅÆ„É¶„Éº„Ç∂„Éº„Åã„ÉÅ„Çß„ÉÉ„ÇØ
    isSameStore(storeId) {
        return this.currentUserProfile?.store_id === storeId;
    },

    // Ë™çË®º„ÅåÂøÖË¶Å„Å™„Éö„Éº„Ç∏„ÅÆÂàùÊúüÂåñ
    async initProtectedPage() {
        console.log('Initializing protected page...');
        
        const authStatus = await this.checkAuth();
        
        if (!authStatus.authenticated) {
            console.log('Not authenticated, redirecting to login...');
            window.location.href = './login.html';
            return false;
        }

        console.log('User authenticated:', authStatus.profile.user_name);
        
        // „É¶„Éº„Ç∂„ÉºÊÉÖÂ†±„ÇíUI„Å´ÂèçÊò†
        this.updateUIWithUserInfo();
        
        return true;
    },

    // UI„Å´„É¶„Éº„Ç∂„ÉºÊÉÖÂ†±„ÇíÂèçÊò†
    updateUIWithUserInfo() {
        const profile = this.currentUserProfile;
        if (!profile) return;

        // „Éò„ÉÉ„ÉÄ„Éº„ÅÆ„É¶„Éº„Ç∂„ÉºÊÉÖÂ†±„ÇíÊõ¥Êñ∞
        const userInfo = document.getElementById('user-info');
        if (userInfo) {
            const roleIcon = profile.role === 'admin' ? 'üëë' : 'üë§';
            userInfo.innerHTML = `${roleIcon} ${profile.user_name} (${profile.store.store_name})`;
        }

        // „Éò„ÉÉ„ÉÄ„Éº„Çø„Ç§„Éà„É´„ÇíÊõ¥Êñ∞Ôºà„Ç™„Éó„Ç∑„Éß„É≥Ôºâ
        const headerTitle = document.querySelector('header h1');
        if (headerTitle) {
            headerTitle.textContent = `‰∏çÂãïÁî£Â£≤Ë≤∑ÁÆ°ÁêÜ„Ç∑„Çπ„ÉÜ„É† - ${profile.store.store_name}`;
        }
    },

    // „Çª„ÉÉ„Ç∑„Éß„É≥Â§âÊõ¥„ÅÆÁõ£Ë¶ñ
    setupAuthListener() {
        supabase.auth.onAuthStateChange(async (event, session) => {
            console.log('Auth state changed:', event);
            
            if (event === 'SIGNED_OUT') {
                window.location.href = './login.html';
            } else if (event === 'SIGNED_IN' && session) {
                console.log('User signed in:', session.user.email);
            } else if (event === 'TOKEN_REFRESHED') {
                console.log('Token refreshed');
            }
        });
    }
};

// „Ç∞„É≠„Éº„Éê„É´„Çπ„Ç≥„Éº„Éó„Å´ÂÖ¨Èñã
window.Auth = Auth;
